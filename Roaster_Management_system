{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOgvJZWdPYX9Tt7TCW5pW2z"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"9dm4YcP0SCfo"},"outputs":[],"source":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"8046b3fb","executionInfo":{"status":"ok","timestamp":1750142291609,"user_tz":-330,"elapsed":183,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"outputId":"8892c483-25fd-4ce3-d4e1-2042ea64cbe3"},"source":["import pandas as pd\n","\n","# Replace '/path/to/your/file.csv' with the actual path to your CSV file\n","file_path = '//content/year_forcast.xlsx'\n","try:\n","  df = pd.read_excel(file_path)\n","  display(df)\n","except FileNotFoundError:\n","  print(f\"Error: The file was not found at {file_path}\")\n","except Exception as e:\n","  print(f\"An error occurred: {e}\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         Datte Shashi Prakash Vikash Soni Dhruw Shekhar Rohit Yadav  \\\n","0   2024-01-01              H           H             H           H   \n","1   2024-01-02              N           E             N           E   \n","2   2024-01-03              N           E             N           E   \n","3   2024-01-04              N           E             N           E   \n","4   2024-01-05              N           E             N           E   \n","..         ...            ...         ...           ...         ...   \n","361 2024-12-27            NaN         NaN           NaN         NaN   \n","362 2024-12-28            NaN         NaN           NaN         NaN   \n","363 2024-12-29            NaN         NaN           NaN         NaN   \n","364 2024-12-30            NaN         NaN           NaN         NaN   \n","365 2024-12-31              H           H             H           H   \n","\n","    Jugnu Chhatria Praveer Krishna Arijeet datta  \n","0                H               H           NaN  \n","1                M              EL           NaN  \n","2                M              EL           NaN  \n","3                M               M           NaN  \n","4                M               M           NaN  \n","..             ...             ...           ...  \n","361            NaN              PL           NaN  \n","362            NaN             NaN           NaN  \n","363            NaN             NaN           NaN  \n","364            NaN              PL           NaN  \n","365            NaN               H             H  \n","\n","[366 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-5cd851ef-e6b3-488f-82b3-4bd6b0e5c90a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Datte</th>\n","      <th>Shashi Prakash</th>\n","      <th>Vikash Soni</th>\n","      <th>Dhruw Shekhar</th>\n","      <th>Rohit Yadav</th>\n","      <th>Jugnu Chhatria</th>\n","      <th>Praveer Krishna</th>\n","      <th>Arijeet datta</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2024-01-01</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2024-01-02</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>EL</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-01-03</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>EL</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-01-04</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-01-05</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>361</th>\n","      <td>2024-12-27</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>PL</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>362</th>\n","      <td>2024-12-28</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>363</th>\n","      <td>2024-12-29</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>364</th>\n","      <td>2024-12-30</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>PL</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>365</th>\n","      <td>2024-12-31</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>H</td>\n","      <td>NaN</td>\n","      <td>H</td>\n","      <td>H</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>366 rows Ã— 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5cd851ef-e6b3-488f-82b3-4bd6b0e5c90a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5cd851ef-e6b3-488f-82b3-4bd6b0e5c90a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5cd851ef-e6b3-488f-82b3-4bd6b0e5c90a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-7be9e029-9b13-46d5-ba54-36fd3fa4a731\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7be9e029-9b13-46d5-ba54-36fd3fa4a731')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-7be9e029-9b13-46d5-ba54-36fd3fa4a731 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_42a01027-a977-4fd3-8827-3928fab44256\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_42a01027-a977-4fd3-8827-3928fab44256 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 366,\n  \"fields\": [\n    {\n      \"column\": \"Datte\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-01-01 00:00:00\",\n        \"max\": \"2024-12-31 00:00:00\",\n        \"num_unique_values\": 366,\n        \"samples\": [\n          \"2024-07-12 00:00:00\",\n          \"2024-02-03 00:00:00\",\n          \"2024-01-16 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shashi Prakash\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Dhruw\",\n          \"Rohit \",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Vikash Soni\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"EL\",\n          \"CL\",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dhruw Shekhar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"Vikash\",\n          \"Dhruw\",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rohit Yadav\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Rohit \",\n          \"Dhruw\",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jugnu Chhatria\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Vikash\",\n          \"Shashi\",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Praveer Krishna\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"Dhruw\",\n          \"PL\",\n          \"H\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Arijeet datta\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 13,\n        \"samples\": [\n          \"Arijeet\",\n          \"M\",\n          \"Praveer\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"e6d6ea11","executionInfo":{"status":"ok","timestamp":1750142291655,"user_tz":-330,"elapsed":78,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"outputId":"b0351426-2d27-4992-f1e3-1107ed98fb8f"},"source":["# Ensure the date column is in datetime format\n","df['Datte'] = pd.to_datetime(df['Datte'])\n","\n","# Filter for the month of June\n","july_data = df[df['Datte'].dt.month == 7]\n","\n","display(july_data)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["         Datte Shashi Prakash Vikash Soni Dhruw Shekhar Rohit Yadav  \\\n","182 2024-07-01             EL           M             M           E   \n","183 2024-07-02             EL           M             N           E   \n","184 2024-07-03             EL           M             N           E   \n","185 2024-07-04             EL           M             N           E   \n","186 2024-07-05             EL           M             N           E   \n","187 2024-07-06         Vikash      Vikash        Vikash      Vikash   \n","188 2024-07-07         Vikash      Vikash        Vikash      Vikash   \n","189 2024-07-08             EL           E             M           N   \n","190 2024-07-09             EL           E             M           N   \n","191 2024-07-10              M           E             M           N   \n","192 2024-07-11              M           E             M           N   \n","193 2024-07-12              M           E             M           N   \n","194 2024-07-13        Praveer     Praveer       Praveer     Praveer   \n","195 2024-07-14        Praveer     Praveer       Praveer     Praveer   \n","196 2024-07-15              N           N             E           M   \n","197 2024-07-16              N           N             E           M   \n","198 2024-07-17              N           N             E           M   \n","199 2024-07-18              N           N             E           M   \n","200 2024-07-19              N           N             E           M   \n","201 2024-07-20         Shashi      Shashi        Shashi      Shashi   \n","202 2024-07-21         Shashi      Shashi        Shashi      Shashi   \n","203 2024-07-22              M           N             E           N   \n","204 2024-07-23              M           N             E           N   \n","205 2024-07-24             CL           N             E           N   \n","206 2024-07-25              M           N             E           N   \n","207 2024-07-26              M           N             E           N   \n","208 2024-07-27         Rohit       Rohit         Rohit       Rohit    \n","209 2024-07-28         Rohit       Rohit         Rohit       Rohit    \n","210 2024-07-29              E           M             N           E   \n","211 2024-07-30              E           M             N           E   \n","212 2024-07-31              E           M             N           E   \n","\n","    Jugnu Chhatria Praveer Krishna Arijeet datta  \n","182            NaN               E             N  \n","183            NaN               E             N  \n","184            NaN               E             N  \n","185            NaN               E             N  \n","186            NaN               E             N  \n","187         Vikash          Vikash        Vikash  \n","188         Vikash          Vikash        Vikash  \n","189            NaN               N             E  \n","190            NaN               N             E  \n","191            NaN               N             E  \n","192            NaN               N             E  \n","193            NaN               N             E  \n","194        Praveer         Praveer       Praveer  \n","195        Praveer         Praveer       Praveer  \n","196            NaN               E             M  \n","197            NaN               E             M  \n","198            NaN               E             M  \n","199            NaN               E             M  \n","200            NaN               E             M  \n","201         Shashi          Shashi        Shashi  \n","202         Shashi          Shashi        Shashi  \n","203            NaN              EL             E  \n","204            NaN               M             E  \n","205            NaN               M             E  \n","206            NaN               M             E  \n","207            NaN               M             E  \n","208         Rohit           Rohit         Rohit   \n","209         Rohit           Rohit         Rohit   \n","210            NaN               N             M  \n","211            NaN               N             M  \n","212            NaN               N             M  "],"text/html":["\n","  <div id=\"df-3b42113e-5cc5-43f0-b015-ef7f798f733e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Datte</th>\n","      <th>Shashi Prakash</th>\n","      <th>Vikash Soni</th>\n","      <th>Dhruw Shekhar</th>\n","      <th>Rohit Yadav</th>\n","      <th>Jugnu Chhatria</th>\n","      <th>Praveer Krishna</th>\n","      <th>Arijeet datta</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>182</th>\n","      <td>2024-07-01</td>\n","      <td>EL</td>\n","      <td>M</td>\n","      <td>M</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>2024-07-02</td>\n","      <td>EL</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>2024-07-03</td>\n","      <td>EL</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>2024-07-04</td>\n","      <td>EL</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>186</th>\n","      <td>2024-07-05</td>\n","      <td>EL</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>N</td>\n","    </tr>\n","    <tr>\n","      <th>187</th>\n","      <td>2024-07-06</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","    </tr>\n","    <tr>\n","      <th>188</th>\n","      <td>2024-07-07</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","      <td>Vikash</td>\n","    </tr>\n","    <tr>\n","      <th>189</th>\n","      <td>2024-07-08</td>\n","      <td>EL</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>190</th>\n","      <td>2024-07-09</td>\n","      <td>EL</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>191</th>\n","      <td>2024-07-10</td>\n","      <td>M</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>192</th>\n","      <td>2024-07-11</td>\n","      <td>M</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>193</th>\n","      <td>2024-07-12</td>\n","      <td>M</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>194</th>\n","      <td>2024-07-13</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","    </tr>\n","    <tr>\n","      <th>195</th>\n","      <td>2024-07-14</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","      <td>Praveer</td>\n","    </tr>\n","    <tr>\n","      <th>196</th>\n","      <td>2024-07-15</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>197</th>\n","      <td>2024-07-16</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>198</th>\n","      <td>2024-07-17</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>199</th>\n","      <td>2024-07-18</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>2024-07-19</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>NaN</td>\n","      <td>E</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>201</th>\n","      <td>2024-07-20</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>2024-07-21</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","      <td>Shashi</td>\n","    </tr>\n","    <tr>\n","      <th>203</th>\n","      <td>2024-07-22</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>EL</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>204</th>\n","      <td>2024-07-23</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>M</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>205</th>\n","      <td>2024-07-24</td>\n","      <td>CL</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>M</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>206</th>\n","      <td>2024-07-25</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>M</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>207</th>\n","      <td>2024-07-26</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>N</td>\n","      <td>NaN</td>\n","      <td>M</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>208</th>\n","      <td>2024-07-27</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","    </tr>\n","    <tr>\n","      <th>209</th>\n","      <td>2024-07-28</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","      <td>Rohit</td>\n","    </tr>\n","    <tr>\n","      <th>210</th>\n","      <td>2024-07-29</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>211</th>\n","      <td>2024-07-30</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>M</td>\n","    </tr>\n","    <tr>\n","      <th>212</th>\n","      <td>2024-07-31</td>\n","      <td>E</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>E</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>M</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b42113e-5cc5-43f0-b015-ef7f798f733e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3b42113e-5cc5-43f0-b015-ef7f798f733e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3b42113e-5cc5-43f0-b015-ef7f798f733e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-93ebd316-82d2-4841-ac20-bcc4bb54f98d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-93ebd316-82d2-4841-ac20-bcc4bb54f98d')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-93ebd316-82d2-4841-ac20-bcc4bb54f98d button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","  <div id=\"id_218a93a8-6ace-4b12-9b3e-26a9719ec6b9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('july_data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_218a93a8-6ace-4b12-9b3e-26a9719ec6b9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('july_data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"july_data","summary":"{\n  \"name\": \"july_data\",\n  \"rows\": 31,\n  \"fields\": [\n    {\n      \"column\": \"Datte\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-07-01 00:00:00\",\n        \"max\": \"2024-07-31 00:00:00\",\n        \"num_unique_values\": 31,\n        \"samples\": [\n          \"2024-07-28 00:00:00\",\n          \"2024-07-16 00:00:00\",\n          \"2024-07-24 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shashi Prakash\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Rohit \",\n          \"Vikash\",\n          \"Shashi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Vikash Soni\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"M\",\n          \"Vikash\",\n          \"Shashi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Dhruw Shekhar\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"M\",\n          \"N\",\n          \"Shashi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rohit Yadav\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"E\",\n          \"Vikash\",\n          \"Shashi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Jugnu Chhatria\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Praveer\",\n          \"Rohit \",\n          \"Vikash\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Praveer Krishna\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Vikash\",\n          \"EL\",\n          \"E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Arijeet datta\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"N\",\n          \"Vikash\",\n          \"Shashi\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"3d357429","executionInfo":{"status":"ok","timestamp":1750142291659,"user_tz":-330,"elapsed":16,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bfa7a4e3-dcb2-4f62-ebe6-724ed1f32fa9"},"source":["# Define the dictionary of leave codes\n","leave_codes = {\n","    'PL': 'Planned Leave',\n","    'CL': 'Casual Leave',\n","    'EL': 'Emergency Leave',\n","    'OL': 'C-off leave',\n","    'HPL': 'Half Planned Leave',\n","    'HCL': 'Half Casual leave',\n","    'HEL': 'Half Emergency Leave',\n","    'HOL': 'Half C-off leave',\n","    'A': 'Absent'\n","}\n","\n","# Select only the employee columns (excluding 'Datte')\n","employee_columns = july_data.columns.drop('Datte')\n","\n","# Initialize a dictionary to store leave counts for each employee\n","employee_leave_counts = {}\n","\n","# Iterate through each employee column\n","for employee in employee_columns:\n","    # Filter the data for leave codes for the current employee\n","    employee_leaves = july_data[employee].apply(lambda x: x if x in leave_codes else None).dropna()\n","\n","    # Count the occurrences of each leave code for the current employee\n","    leave_counts = employee_leaves.value_counts().to_dict()\n","\n","    # Store the leave counts for the current employee\n","    employee_leave_counts[employee] = leave_counts\n","\n","# Display the leave counts for each employee\n","for employee, counts in employee_leave_counts.items():\n","    print(f\"Leave counts for {employee} in June:\")\n","    if counts:\n","        for leave_type, count in counts.items():\n","            print(f\"  {leave_codes[leave_type]}: {count}\")\n","    else:\n","        print(\"  No recorded leaves.\")\n","    print(\"-\" * 20)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Leave counts for Shashi Prakash in June:\n","  Emergency Leave: 7\n","  Casual Leave: 1\n","--------------------\n","Leave counts for Vikash Soni in June:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Dhruw Shekhar in June:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Rohit Yadav in June:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Jugnu Chhatria in June:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Praveer Krishna in June:\n","  Emergency Leave: 1\n","--------------------\n","Leave counts for Arijeet datta in June:\n","  No recorded leaves.\n","--------------------\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"KZ3n5gMyVbga"},"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"581e1cb5","executionInfo":{"status":"ok","timestamp":1750142291669,"user_tz":-330,"elapsed":12,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"284ff39b-6049-4f57-8b15-91cc37596605"},"source":["# Define codes that indicate a working day (including shifts and 'Present')\n","working_day_codes = ['M', 'E', 'N', 'P']\n","\n","# Select only the employee columns (excluding 'Datte')\n","employee_columns = july_data.columns.drop('Datte')\n","\n","# Initialize a dictionary to store working day counts for each employee\n","employee_working_days = {}\n","\n","# Iterate through each employee column\n","for employee in employee_columns:\n","    # Filter the data for working day codes for the current employee\n","    employee_work_days = july_data[employee].apply(lambda x: x if x in working_day_codes else None).dropna()\n","\n","    # Count the occurrences of each working day code for the current employee\n","    work_day_counts = employee_work_days.value_counts().to_dict()\n","\n","    # Store the working day counts for the current employee\n","    employee_working_days[employee] = work_day_counts\n","\n","# Display the working day counts for each employee\n","for employee, counts in employee_working_days.items():\n","    print(f\"Working day counts for {employee} in June:\")\n","    if counts:\n","        for work_type, count in counts.items():\n","            print(f\"  {work_type}: {count}\") # Display the code and count for working days\n","    else:\n","        print(\"  No recorded working days.\")\n","    print(\"-\" * 20)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Working day counts for Shashi Prakash in June:\n","  M: 7\n","  N: 5\n","  E: 3\n","--------------------\n","Working day counts for Vikash Soni in June:\n","  N: 10\n","  M: 8\n","  E: 5\n","--------------------\n","Working day counts for Dhruw Shekhar in June:\n","  E: 10\n","  N: 7\n","  M: 6\n","--------------------\n","Working day counts for Rohit Yadav in June:\n","  N: 10\n","  E: 8\n","  M: 5\n","--------------------\n","Working day counts for Jugnu Chhatria in June:\n","  No recorded working days.\n","--------------------\n","Working day counts for Praveer Krishna in June:\n","  E: 10\n","  N: 8\n","  M: 4\n","--------------------\n","Working day counts for Arijeet datta in June:\n","  E: 10\n","  M: 8\n","  N: 5\n","--------------------\n"]}]},{"cell_type":"code","metadata":{"id":"365340b6","executionInfo":{"status":"ok","timestamp":1750142291681,"user_tz":-330,"elapsed":9,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d6e4a629-00f0-467b-d87c-91bdc6be8e69"},"source":["# Assuming each working day (M, E, N, P) is equivalent to 8 hours\n","\n","# Initialize a dictionary to store total hours worked for each employee\n","employee_total_hours = {}\n","\n","# Iterate through the working day counts for each employee\n","for employee, counts in employee_working_days.items():\n","    total_hours = 0\n","    if counts:\n","        for work_type, count in counts.items():\n","            # Multiply the count of each working day code by 8 (hours per day)\n","            total_hours += count * 8\n","    employee_total_hours[employee] = total_hours\n","\n","# Display the total hours worked for each employee\n","print(\"Total hours worked by each employee in June:\")\n","for employee, hours in employee_total_hours.items():\n","    print(f\"  {employee}: {hours} hours\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total hours worked by each employee in June:\n","  Shashi Prakash: 120 hours\n","  Vikash Soni: 184 hours\n","  Dhruw Shekhar: 184 hours\n","  Rohit Yadav: 184 hours\n","  Jugnu Chhatria: 0 hours\n","  Praveer Krishna: 176 hours\n","  Arijeet datta: 184 hours\n"]}]},{"cell_type":"code","metadata":{"id":"c3327de1","executionInfo":{"status":"ok","timestamp":1750142291710,"user_tz":-330,"elapsed":25,"user":{"displayName":"Dhruw Shekhar","userId":"12171846106444410327"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a3a6e61e-0785-4a76-ed85-e57edd3ce4bc"},"source":["import pandas as pd\n","\n","# Assuming the DataFrame 'df' is already loaded and 'Datte' is in datetime format\n","\n","# Filter for the month of June\n","july_data = df[df['Datte'].dt.month == 6]\n","\n","# Define the dictionary of codes\n","leave_codes = {\n","    'PL': 'Planned Leave',\n","    'CL': 'Casual Leave',\n","    'EL': 'Emergency Leave',\n","    'OL': 'C-off leave',\n","    'HPL': 'Half Planned Leave',\n","    'HCL': 'Half Casual leave',\n","    'HEL': 'Half Emergency Leave',\n","    'HOL': 'Half C-off leave',\n","    'A': 'Absent'\n","}\n","\n","working_day_codes = ['M', 'E', 'N', 'P']\n","\n","# Select only the employee columns (excluding 'Datte')\n","employee_columns = july_data.columns.drop('Datte')\n","\n","# Initialize dictionaries to store leave counts, working day counts, and total hours for each employee\n","employee_leave_counts = {}\n","employee_working_days = {}\n","employee_total_hours = {}\n","\n","# Iterate through each employee column\n","for employee in employee_columns:\n","    # Filter the data for leave codes for the current employee\n","    employee_leaves = july_data[employee].apply(lambda x: x if x in leave_codes else None).dropna()\n","\n","    # Count the occurrences of each leave code for the current employee\n","    leave_counts = employee_leaves.value_counts().to_dict()\n","\n","    # Store the leave counts for the current employee\n","    employee_leave_counts[employee] = leave_counts\n","\n","    # Filter the data for working day codes for the current employee\n","    employee_work_days = july_data[employee].apply(lambda x: x if x in working_day_codes else None).dropna()\n","\n","    # Count the occurrences of each working day code for the current employee\n","    work_day_counts = employee_work_days.value_counts().to_dict()\n","\n","    # Store the working day counts for the current employee\n","    employee_working_days[employee] = work_day_counts\n","\n","    # Calculate total hours worked for the current employee\n","    total_hours = 0\n","    if work_day_counts:\n","        for work_type, count in work_day_counts.items():\n","            total_hours += count * 8  # Assuming each working day is 8 hours\n","    employee_total_hours[employee] = total_hours\n","\n","\n","# Display the results\n","\n","print(\"--- June Analysis ---\")\n","\n","print(\"\\nLeave counts for each employee in June:\")\n","for employee, counts in employee_leave_counts.items():\n","    print(f\"Leave counts for {employee}:\")\n","    if counts:\n","        for leave_type, count in counts.items():\n","            print(f\"  {leave_codes[leave_type]}: {count}\")\n","    else:\n","        print(\"  No recorded leaves.\")\n","    print(\"-\" * 20)\n","\n","print(\"\\nWorking day counts for each employee in June:\")\n","for employee, counts in employee_working_days.items():\n","    print(f\"Working day counts for {employee}:\")\n","    if counts:\n","        for work_type, count in counts.items():\n","            print(f\"  {work_type}: {count}\")\n","    else:\n","        print(\"  No recorded working days.\")\n","    print(\"-\" * 20)\n","\n","print(\"\\nTotal hours worked by each employee in June:\")\n","for employee, hours in employee_total_hours.items():\n","    print(f\"  {employee}: {hours} hours\")\n","\n","# Calculate and display total hours worked by all employees\n","total_hours_all_employees = sum(employee_total_hours.values())\n","print(f\"\\nTotal hours worked by all employees in June: {total_hours_all_employees} hours\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- June Analysis ---\n","\n","Leave counts for each employee in June:\n","Leave counts for Shashi Prakash:\n","  Emergency Leave: 1\n","--------------------\n","Leave counts for Vikash Soni:\n","  Planned Leave: 3\n","  Emergency Leave: 1\n","--------------------\n","Leave counts for Dhruw Shekhar:\n","  Emergency Leave: 2\n","--------------------\n","Leave counts for Rohit Yadav:\n","  Emergency Leave: 1\n","--------------------\n","Leave counts for Jugnu Chhatria:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Praveer Krishna:\n","  No recorded leaves.\n","--------------------\n","Leave counts for Arijeet datta:\n","  No recorded leaves.\n","--------------------\n","\n","Working day counts for each employee in June:\n","Working day counts for Shashi Prakash:\n","  N: 9\n","  M: 8\n","  E: 1\n","--------------------\n","Working day counts for Vikash Soni:\n","  M: 5\n","  E: 5\n","  N: 5\n","--------------------\n","Working day counts for Dhruw Shekhar:\n","  N: 9\n","  E: 5\n","  M: 3\n","--------------------\n","Working day counts for Rohit Yadav:\n","  E: 8\n","  M: 5\n","  N: 5\n","--------------------\n","Working day counts for Jugnu Chhatria:\n","  No recorded working days.\n","--------------------\n","Working day counts for Praveer Krishna:\n","  N: 10\n","  M: 5\n","  E: 4\n","--------------------\n","Working day counts for Arijeet datta:\n","  E: 15\n","  M: 4\n","--------------------\n","\n","Total hours worked by each employee in June:\n","  Shashi Prakash: 144 hours\n","  Vikash Soni: 120 hours\n","  Dhruw Shekhar: 136 hours\n","  Rohit Yadav: 144 hours\n","  Jugnu Chhatria: 0 hours\n","  Praveer Krishna: 152 hours\n","  Arijeet datta: 152 hours\n","\n","Total hours worked by all employees in June: 848 hours\n"]}]},{"cell_type":"markdown","metadata":{"id":"f7e2c8ee"},"source":["To connect your Colab notebook with your GitHub account, you can follow these steps:\n","\n","1. **Save a copy in GitHub:**\n","   - With your notebook open in Colab, go to `File` in the menu bar.\n","   - Select `Save a copy in GitHub`.\n","\n","2. **Authorize Colab:**\n","   - If this is your first time connecting Colab to GitHub, you will be prompted to authorize Google Colaboratory to access your GitHub account.\n","   - Click on `Authorize Google Colaboratory`.\n","\n","3. **Choose a repository and file path:**\n","   - A dialog box will appear.\n","   - Select the GitHub repository where you want to save the notebook.\n","   - You can also specify a file path within the repository if you don't want to save it in the root directory.\n","   - Add a commit message (optional).\n","\n","4. **Save:**\n","   - Click `OK` to save the notebook to your GitHub repository.\n","\n","Your Colab notebook is now connected to your GitHub account and saved in the specified repository. You can continue working on the notebook in Colab, and any changes you save will be committed to the linked GitHub file.\n","\n","To open a notebook directly from GitHub:\n","\n","1. Go to `File` > `Open notebook`.\n","2. Select the `GitHub` tab.\n","3. Enter the GitHub repository URL or search for the repository.\n","4. Select the notebook file you want to open."]}]}